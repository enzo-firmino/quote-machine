<?php

// api/tests/BooksTest.php

namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\Quote;
use Symfony\Contracts\HttpClient\Exception\ClientExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\DecodingExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\RedirectionExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\ServerExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;

class QuoteTest extends ApiTestCase
{
    public function testGetCollection(): void
    {
        // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
        $response = static::createClient()->request('GET', '/quotes');

        $this->assertResponseIsSuccessful();
        // Asserts that the returned content type is JSON-LD (the default)
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        // Asserts that the returned JSON is a superset of this one
        try {
            $this->assertJsonContains([
                '@context' => '/contexts/Quote',
                '@id' => '/quotes',
                '@type' => 'hydra:Collection',
                'hydra:totalItems' => 100,
                'hydra:view' => [
                    '@id' => '/books?page=1',
                    '@type' => 'hydra:PartialCollectionView',
                    'hydra:first' => '/books?page=1',
                    'hydra:last' => '/books?page=4',
                    'hydra:next' => '/books?page=2',
                ],
            ]);
        } catch (ClientExceptionInterface $e) {
        } catch (DecodingExceptionInterface $e) {
        } catch (RedirectionExceptionInterface $e) {
        } catch (ServerExceptionInterface $e) {
        } catch (TransportExceptionInterface $e) {
        }

        // Because test fixtures are automatically loaded between each test, you can assert on them
        try {
            $this->assertCount(30, $response->toArray()['hydra:member']);
        } catch (ClientExceptionInterface $e) {
        } catch (DecodingExceptionInterface $e) {
        } catch (RedirectionExceptionInterface $e) {
        } catch (ServerExceptionInterface $e) {
        } catch (TransportExceptionInterface $e) {
        }

        // Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
        // This generated JSON Schema is also used in the OpenAPI spec!
        $this->assertMatchesResourceCollectionJsonSchema(Quote::class);
    }

    public function testCreateBook(): void
    {
        try {
            $response = static::createClient()->request('POST', '/quotes', ['json' => [
                'meta' => 'The Handmaid\'s Tale',
                'content' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
            ]]);
        } catch (TransportExceptionInterface $e) {
        }

        $this->assertResponseStatusCodeSame(201);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
        try {
            $this->assertJsonContains([
                '@context' => '/contexts/Quote',
                '@type' => 'Quote',
                'meta' => 'The Handmaid\'s Tale',
                'content' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
                'category' => [],
            ]);
        } catch (ClientExceptionInterface $e) {
        } catch (DecodingExceptionInterface $e) {
        } catch (RedirectionExceptionInterface $e) {
        } catch (ServerExceptionInterface $e) {
        } catch (TransportExceptionInterface $e) {
        }
        try {
            $this->assertRegExp('~^/quotes/\d+$~', $response->toArray()['@id']);
        } catch (ClientExceptionInterface $e) {
        } catch (DecodingExceptionInterface $e) {
        } catch (RedirectionExceptionInterface $e) {
        } catch (ServerExceptionInterface $e) {
        } catch (TransportExceptionInterface $e) {
        }
        $this->assertMatchesResourceItemJsonSchema(Quote::class);
    }

    public function testUpdateQuote(): void
    {
        $client = static::createClient();
        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(Quote::class, ['meta' => 'The Handmaid\'s Tale']);

        try {
            $client->request('PUT', $iri, ['json' => [
                'meta' => 'updated title',
            ]]);
        } catch (TransportExceptionInterface $e) {
        }

        $this->assertResponseIsSuccessful();
        try {
            $this->assertJsonContains([
                'meta' => 'updated title',
                'content' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
            ]);
        } catch (ClientExceptionInterface $e) {
        } catch (DecodingExceptionInterface $e) {
        } catch (RedirectionExceptionInterface $e) {
        } catch (ServerExceptionInterface $e) {
        } catch (TransportExceptionInterface $e) {
        }
    }

    public function testDeleteQuote(): void
    {
        $client = static::createClient();
        $iri = $this->findIriBy(Quote::class, ['meta' => 'updated title']);

        $client->request('DELETE', $iri);

        $this->assertResponseStatusCodeSame(204);
        $this->assertNull(
        // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
            static::$container->get('doctrine')->getRepository(Book::class)->findOneBy(['isbn' => '9781344037075'])
        );
    }

    public function testLogin(): void
    {
        $response = static::createClient()->request('POST', '/login', ['json' => [
            'email' => 'admin@example.com',
            'password' => 'admin',
        ]]);

        $this->assertResponseIsSuccessful();
    }
}
